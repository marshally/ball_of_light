{"tagline":"","google":"","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Ball of light","body":"# ball_of_light\r\n\r\n[![Build Status](https://secure.travis-ci.org/marshally/ball_of_light.png?branch=master)](http://travis-ci.org/marshally/ball_of_light)\r\n\r\n## Project Goals\r\n\r\nCreate an light show based on the movements of participants, with data gathered by a Microsoft Kinect. See [the Ball of Light](http://balloflight.com)\r\n\r\n## Example\r\n\r\nYeah, yeah. Just show me the code.\r\n\r\nHere's a simple script that connects to the DMX controller, centers and turns on\r\nthe lights, and then cycles through the colors every 5 seconds.\r\n\r\n```ruby\r\n#!/usr/bin/env ruby\r\nrequire 'bundler'\r\nBundler.setup\r\n\r\n# setup controller\r\ncontroller = BallOfLight::BallOfLightController.new(options)\r\n\r\n# Section Goal: Point toward the center for 30 seconds.\r\n\r\n# This command turns the all of the lights on\r\ncontroller.on!\r\n\r\n# alternatively, you could turn the lights on \"the hard way\" by sending\r\n# queueing up the command buffer with a 0-255 integer to the dimmer\r\n# control. And then using the write! method to flush the buffer.\r\n#\r\n#      controller.buffer(:dimmer => 255)\r\n#      controller.write!\r\n#\r\n\r\n# methods called without the exclamation point only write to the buffer.\r\n# with the exclamation point, your commands will get sent to the DMX\r\n# controller immediately.\r\n\r\n# Now let's turn all of the lights to the center point.\r\ncontroller.center\r\n\r\n# Hmmm. We're not sure what color wheel location someone previously left\r\n# on the lights, so let's be careful and switch it back to white.\r\ncontroller.nocolor # this sends the named point instantly\r\ncontroller.write! # this sends whatever is in the buffer\r\n\r\n# Now the fun part. Let's set up a little loop and run through all the\r\n# colors with a half second delay in between.\r\n\r\n[:yellow, :red, :green, :blue, :teardrop, :polka, :teal, :rings].each do |color|\r\n  controller.instant!(:point => color)\r\n  sleep(0.5)\r\nend\r\n\r\n# what else can it do?\r\n# show me a list all of the capabilities of the hooked up devices\r\nputs controller.capabilities\r\n# => [:pan, :tilt, :strobe, :gobo, :dimmer]\r\n# these are the basic commands that we can send to the DmxController or the\r\n# DmxDevices it holds\r\n\r\n# show me a list all of the named points of the hooked up devices\r\nputs controller.points\r\n# => [:center, :strobe_blackout, :strobe_open, :strobe_slow, :strobe_fast, :strobe_slow_fast, :strobe_fast_slow, :strobe_random, :nocolor, :yellow, :red, :green, :blue, :teardrop, :polka, :teal, :rings, :on, :off]\r\n# \"points\" are like little macros that are composed of one or more of the\r\n# basic capabilities.\r\n\r\n# For example, :center is the same as {:pan => 127, :tilt => 127}\r\n```\r\n\r\n## Capabilities\r\n\r\nThe Ball Of Light project is using 12 [Comscan LED](http://www.samash.com/wcsstore/root/Product_Manuals_Brochures/American%20DJ/ACOMSCANL/comscan_led.pdf) scanner lights.\r\n\r\n### Natively the Comscan LEDs support:\r\n\r\n* :pan (0-255) - a pan servo that turns the light clockwise/counter-clockwise\r\n* :tilt (0-255) - a tilt mirror that sweeps the light up/down\r\n* :strobe (0-255) - a strobe light\r\n* :gobo (0-255) - a GOBO wheel that changes the colors of the lights\r\n* :dimmer (0-255) - controls light brightness\r\n\r\n### Additional capabilities from `open_lighting`\r\n\r\n* :center\r\n* :origin\r\n* :strobe_blackout\r\n* :strobe_open\r\n* :strobe_slow\r\n* :strobe_fast\r\n* :strobe_slow_fast\r\n* :strobe_fast_slow\r\n* :strobe_random\r\n* :nocolor\r\n* :yellow\r\n* :red\r\n* :green\r\n* :blue\r\n* :teardrop\r\n* :polka\r\n* :teal\r\n* :rings\r\n* :on\r\n* :off\r\n* :bottom\r\n\r\nSee [open_lighting_rb](https://github.com/marshally/open_lighting_rb/blob/master/lib/open_lighting/devices/comscan_led.rb) for more information on how this works.\r\n\r\n## Installation\r\n\r\n### Installation: Hardware required\r\n\r\n1. DMX USB Pro\r\n1. Mac running OSX (Lion preferred)\r\n    * homebrew package manager [install instructions here](https://github.com/mxcl/homebrew/wiki/installation)\r\n\r\n        1. install homebrew itself\r\n\r\n            ```bash\r\n            /usr/bin/ruby -e \"$(/usr/bin/curl -fsSL https://raw.github.com/mxcl/homebrew/master/Library/Contributions/install_homebrew.rb)\"\r\n            ```\r\n\r\n        2. install compilers and command line tools\r\n\r\n            * OS X 10.7 Lion: [GCC-10.7.pkg](https://github.com/downloads/kennethreitz/osx-gcc-installer/GCC-10.7-v2.pkg)\r\n            * OS X 10.6 Snow Leopard: [GCC-10.6.pkg](https://github.com/downloads/kennethreitz/osx-gcc-installer/GCC-10.6.pkg)\r\n\r\n    * DMX USB Pro drivers install\r\n1. Cables\r\n    * USB 1.0 cable\r\n    * 1x XLR 5-pin to XLR 3 pin\r\n    * 11x XLR 3-pin male to XLR 3-pin female\r\n\r\n### Installation: Software Installation\r\n\r\n1. Install Homebrew packages\r\n\r\n    ```bash\r\n    brew install git\r\n    brew tap marshally/homebrew-alt\r\n    brew install ball_of_light\r\n    ````\r\n    \r\n    * see Troubleshooting section below if you get errors\r\n\r\n1. Install ruby 1.9.3, if you don't have it already\r\n\r\n    ```bash\r\n    brew install rbenv\r\n    echo 'if which rbenv > /dev/null; then eval \"$(rbenv init -)\"; fi' >> .bash_profile\r\n    brew install ruby-build\r\n    rbenv install 1.9.3-p194\r\n    rbenv rehash\r\n    ```\r\n\r\n1. install ball_of_light excitements\r\n    ```bash\r\n    git clone https://github.com/marshally/ball_of_light\r\n    cd ball_of_light\r\n    bundle install --path vendor/bundle --deployment\r\n    bin/ball_of_light link\r\n    ```\r\n\r\n2. Install DMX USB Pro drivers from [http://www.ftdichip.com/Drivers/VCP.htm](http://www.ftdichip.com/Drivers/VCP.htm)\r\n\r\n\r\n### Installation: Hardware Installation\r\n\r\n1. plug in MS Kinect\r\n    * check that Kinect is operational\r\n\r\n        ```bash\r\n        ball_of_light test --only kinect\r\n        ```\r\n\r\n1. plug in DMX USB Pro\r\n    1. check that the DMX USB Pro is operational\r\n\r\n        ```bash\r\n        ball_of_light test --only dmx\r\n        ```\r\n\r\n    1. configure DMX ports\r\n\r\n        ```bash\r\n        ball_of_light configure\r\n        ```\r\n\r\n    1. check that the Open Lighting Architecture system is operational\r\n\r\n        ```bash\r\n        ball_of_light test --only ola\r\n        ```\r\n\r\n3. Open up the OLA admin console at '[http://localhost:9090/](http://localhost:9090/)'\r\n\r\n    ![OLA Console](http://marshally.github.com/ball_of_light/OLA_Admin_one.jpg)\r\n\r\n4. Add a new universe\r\n    * universe id=1\r\n    * universe name=BALL_OF_LIGHT\r\n    * select Open DMX Pro OUTPUT\r\n    * click Add Universe (scroll to bottom)\r\n\r\n    ![Add Universe](http://marshally.github.com/ball_of_light/OLA_Admin_configure_universe.jpg)\r\n1. Daisy chain connect all of the lights together\r\n1. Set each light to a unique DMX control number, offset by 5\r\n    * e.g. 1,6,11,16,21,26,31,36,41,46,51,56\r\n\r\n    ```bash\r\n    ball_of_light lights --list\r\n    ```\r\n\r\n1. check that lights are operational with\r\n\r\n    ```bash\r\n    ball_of_light lights --center\r\n    ```\r\n\r\n1. what to see the raw commands that the lights are executing? pass in --testing\r\n\r\n    ```bash\r\n    ball_of_light lights --center --testing\r\n    ```\r\n\r\n### Installation: Troubleshooting\r\n\r\nIf you are having trouble installing pkg-config-2.7 you can cheat with these commands:\r\n\r\n    ```bash\r\n    brew install wget\r\n    rm /usr/local/Library/Formula/pkg-config.rb\r\n    wget  https://raw.github.com/mxcl/homebrew/63415cccaecf9cccf204570ea2242b56ce0ffdc4/Library/Formula/pkg-config.rb /usr/local/Library/Formula/\r\n    brew install ball_of_light\r\n    ```\r\n\r\n## Calibration\r\n\r\n```bash\r\nball_of_light calibrate\r\n```\r\n\r\nThis will begin the `ball_of_light` test sequence. There are 9 or more calibration points per light, so this will take between 15m and 1h for 12 lights. Depending on how quickly you move.\r\n"}