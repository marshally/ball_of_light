#!/usr/bin/env ruby
require 'open3'
require 'json'
require 'io/wait'
require_relative "../lib/ball_of_light/io_helper"

# if `ps aux | grep kinectable_pipe | grep -v grep`.strip
#   puts "kinectable_pipe already running!"
#   exit
# end

BASEDIR= File.dirname(File.realpath(__FILE__)) + "/"
if $stdin.tty?
  cmd = "#{BASEDIR}add_gestures.rb"
  puts cmd
  nothing, $input = Open3.popen2e(cmd)
else
  $input = $stdin
end

def count_skeletons(blob)
  begin
    unless blob.nil?
      skels = JSON.parse(blob)
      if skels["skeletons"]
        # puts "*"*80
        # puts "found #{skels["skeletons"].count} users"
        $last_count = skels["skeletons"].count
      end
    end
  rescue JSON::ParserError
  end
end

$input.sync = true
$stdout.sync = true

File.delete("stderr.log")
File.delete("stdout.log")

def run(script)
  puts "running #{script}"
  cmd = "ruby #{BASEDIR}../scripts/#{script} 2>>stderr.log >>stdout.log"
  Open3.popen2e(cmd) do |stdin, stdout, thread|

    begin
      while(thread.alive? && !stdin.closed?)
        last_skeletons = nil
        # line = IoHelper.gets_most_recent($input)
        # puts line if line
        # stdin.puts line if line
        lines = IoHelper.readall_nonblocking($input)
        lines.each do |line|
          next if stdin.closed?
          stdin.puts line if line
          $stdout.flush

          # stop script if the number of users has changed
          count = count_skeletons(line)
          if count && last_skeletons && last_skeletons != count
            puts ">"*80
            $stdout.puts "User count changed: switching scripts (prev: #{last_skeletons}, next: #{count})"
            $stdout.flush
            Thread.kill(thread)

            break
          end

          last_skeletons = count
        end
      end
      sleep(0.1)
    rescue Errno::EPIPE
    end
    thread.join
  end
end

while(!$input.closed?)
  $stdout.flush
  $input.flush
  lines = IoHelper.readall_nonblocking($input)

  lines.reject! do |line|
    line.nil? || !line.include?("skeletons")
  end

  case count_skeletons(lines.last)
  when 0
    script = ["0.rb", "heartbeat.rb", "factory.rb", "factory.rb", "spiral.rb", "chase.rb"].sample
  when 1
    script = "1.rb"
  when 2
    script = "hug.rb"
  when nil
    script = ["0.rb", "heartbeat.rb", "factory.rb", "factory.rb", "spiral.rb", "chase.rb"].sample
  else
    script = ["1.rb", "factory.rb"].sample
  end

  run script
  sleep(0.1)
end

