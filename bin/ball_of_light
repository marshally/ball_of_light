#!/usr/bin/env ruby
require 'bundler'
Bundler.setup

require 'thor'

require_relative '../lib/ball_of_light'

# Hey you: reader of this code!
# This is a hacktastic mess.
module BallOfLight
  class CLI < Thor
    desc "test", "runs tests (specify with --only kinect dmx ola)"
    method_option :only, :aliases => "--only", :desc => "component to test, e.g. -s kinect dmx ola"
    def test
      case options[:only]
      when "kinect"
        test_kinect
      when "dmx"
        test_usbpro
      when "ola"
        test_ola
      when nil
        test_kinect
        test_usbpro
        test_ola
      else
        puts "Invalid --only. Values"
      end
    end

    desc "configure", "configures subsystems"
    method_option :flexible, :type => :boolean, :defaults => false, :desc => "Use flexible OLA configuration file (default: false)", :banner => "false"
    method_option :usbpro_conf, :type => :boolean, :defaults => true, :desc => "Write a new DMX USB Pro conf file (default: true)", :banner => true
    method_option :disable_unused_devices, :type => :boolean, :defaults => true, :desc => "Disables all OLA devices except DMX USB Pro (default: true)", :banner => true
    def configure
      if options[:usbpro_conf]
        if options[:flexible]
          config_ola_flexible
        else
          config_ola_fixed
        end
      end

      if options[:disable_unused_devices]
        disable_unused_ola_devices
      end
    end

    desc "lights", "control DMX lights"
    method_option :list, :type => :boolean, :defaults => true
    method_option :center, :type => :boolean, :defaults => true
    def lights
      list_lights if options[:list]
      center if options[:center]
    end

    no_tasks do
      def usb_drivers
        Dir["/dev/cu.usb*"]
      end

      def test_kinect
        puts "Testing the MS Kinect"
        cmd = "kinectable_pipe"
        unless `which #{cmd}`.include? cmd
          puts "ERROR: It looks like #{cmd} has not been installed (or is not on your PATH). Try:"
          puts "\n  brew install #{cmd}"
        else
          # HACK
          pipe = IO.popen(cmd, "r")
          unless pipe.gets.include? "initializing"
            puts "unknown error with kinect"
          end
          if pipe.gets.include? "problem initializing kinect"
            puts "ERROR: problem initializing kinect. Is it plugged in?"
          end
          pipe.close
        end
      end

      def test_usbpro
        puts "Testing the DMX USB Pro"
        case usb_drivers.count
        when 0
          puts "I can't find your DMX USB Pro. Have you installed the drivers from:"
          puts "  http://www.ftdichip.com/Drivers/VCP.htm"
        when 1
        else
          puts "I found more than one DMX USB Pro device. I'm not sure what to do from here?"
        end
      end

      def test_ola
        puts "Testing OLA"
        raise NotImplementedError
      end

      def config_ola_flexible
        flexible = "
    device_dir = /dev
    device_prefix = ttyUSB
    device_prefix = cu.usbserial-"
        `mkdir -p ~/.ola`
        `echo '#{flexible}' > ~/.ola/ola-usbpro.conf`
      end

      def config_ola_fixed
        fixed = "device = #{usb_devices.first}"
        `mkdir -p ~/.ola`
        `echo '#{fixed}' > ~/.ola/ola-usbpro.conf`
      end

      def disable_unused_ola_devices
        confs = ['artnet', 'e131', 'opendmx', 'shownet', 'dummy', 'espnet', 'pathport',
          'sandnet', 'stageprofi', 'usbdmx', 'usbserial']

        confs.each do |conf|
          file = "~/.ola/ola-#{conf}.conf"
          unless `cat #{file}`.include? "enabled"
            puts "disabling #{file}"
            `echo 'enabled = false' >> #{file}`
          end
        end
      end

      def center
        controller.instant!(:point => :center)
      end

      def list_lights
        puts controller.devices.map{|d| d.start_address }.inspect
      end

      def controller
        @controller ||= BallOfLight::BallOfLightController.new(:cmd => "xargs -n1 echo")
      end

    end
  end
end

BallOfLight::CLI.start
